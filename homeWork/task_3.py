# 3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий количеству
# ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернёт строку:
# *****\n*****\n*****.

class Cell:

    def __init__(self, num_of_cells):
        self.num_of_cells = num_of_cells

    def __add__(self, other):
        return Cell(self.num_of_cells + other.num_of_cells)

    def __sub__(self, other):
        if self.num_of_cells - other.num_of_cells < 0:
            print('Difference less zero')
        else:
            return Cell(self.num_of_cells - other.num_of_cells)

    def __mul__(self, other):
        return Cell(self.num_of_cells * other.num_of_cells)

    def __truediv__(self, other):
        return Cell(self.num_of_cells // other.num_of_cells)

    @property
    def number_of_cells(self):
        return self.num_of_cells

    def make_order(self, divider):
        n = self.num_of_cells // divider
        m = self.num_of_cells % divider
        return ('*' * divider + '\n') * n + '*' * m


cell_1 = Cell(12)
cell_2 = Cell(4)

print(f'cell_1: {cell_1.number_of_cells} | cell_2: {cell_2.number_of_cells}')
print((cell_1 + cell_2).num_of_cells)
print((cell_1 - cell_2).num_of_cells)
cell_2 - cell_1
print((cell_2 * cell_1).num_of_cells)
print((cell_1 / cell_2).num_of_cells)
print(cell_1.make_order(5), end='\n\n')
print(cell_2.make_order(2))
